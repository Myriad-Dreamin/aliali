package main

import (
	"errors"
	"fmt"
	"gopkg.in/yaml.v2"
	"os"
	"os/exec"
	"strings"
)

type EntryDesc struct {
	EntryName    string
	Req          string
	Res          string
	Url          string   `yaml:"Url"`
	Method       string   `yaml:"Method"`
	Interceptors []string `yaml:"Interceptors"`
}

func getTemplate(arg EntryDesc, interceptors []string) string {
	return fmt.Sprintf(`func (y *Ali) %s(reqBody *%s) *%s {
	url := "%s"
	req := y.r(y.client)%s

	var resp = new(%s)
	if !y.unmarshal(y.processResp(req.%s(url)), &resp) {
		return nil
	}
	return resp
}`, arg.EntryName, arg.Req, arg.Res, arg.Url, strings.Join(interceptors, ""), arg.Res, arg.Method)
}

func handleErr(err error) {
	if err != nil {
		panic(err)
	}
}

type GenerateList = map[string]EntryDesc

func main() {
	var defName = os.Args[1]
	defBytes, err := os.ReadFile(defName)
	handleErr(err)

	var def = make(GenerateList)
	handleErr(yaml.Unmarshal(defBytes, def))
	var templateParts []string

	templateParts = append(templateParts, `package ali_drive
//auto generated by go:generate, DO NOT EDIT

`)
	for k, v := range def {
		v.EntryName = k
		if len(v.Req) == 0 {
			v.Req = fmt.Sprintf("Api%sRequest", v.EntryName)
		}
		if len(v.Res) == 0 {
			v.Res = fmt.Sprintf("Api%sResponse", v.EntryName)
		}
		var modifiers, reqHandlers []string
		modifiers = append(modifiers, `.
		SetBody(*reqBody)`)

		for _, incName := range v.Interceptors {
			switch incName {
			case "Auth":
				reqHandlers = append(reqHandlers, `
y.setAuthHeader(req)`)
			default:
				panic(fmt.Errorf("unknown interceptor name: %s", incName))
			}
		}
		templateParts = append(templateParts, getTemplate(v, append(modifiers, reqHandlers...)), "\n\n")
	}

	genTarget := "apis.generate.go"
	handleErr(os.WriteFile(genTarget, []byte(strings.Join(templateParts, "\n")), 0644))

	{
		cmd := exec.Command("go", "fmt", genTarget)
		handleErr(cmd.Run())
		if cmd.ProcessState.ExitCode() != 0 {
			fmt.Println("go fmt exit with", cmd.ProcessState.ExitCode())
			panic(errors.New("go fmt error"))
		}
	}

}
